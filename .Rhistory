rename("importance" = ".") %>%
rownames_to_column("variable") %>%
arrange(desc(importance)) %>%
mutate(variable = factor(variable, levels = unique(variable)),
importance = 100*importance/sum(.$importance)) %>%
ggplot(aes(x=variable, y=importance)) +
geom_col() +
labs(y="% of importance", x="")
ggsave(plot=plot_grid(pvi1, pvi2), filename = "varimp.png", dpi=300, height = 12, width = 18, units = "cm")
pvi1 <- rf$variable.importance %>%
as.data.frame %>%
rename("importance" = ".") %>%
rownames_to_column("variable") %>%
arrange(desc(importance)) %>%
mutate(variable = factor(variable, levels = unique(variable)),
importance = 100*importance/sum(.$importance)) %>%
ggplot(aes(x=variable, y=importance)) +
geom_col() +
labs(y="% of importance", x="") +
theme_bw()
pvi2 <- rf.pca$variable.importance %>%
as.data.frame %>%
rename("importance" = ".") %>%
rownames_to_column("variable") %>%
arrange(desc(importance)) %>%
mutate(variable = factor(variable, levels = unique(variable)),
importance = 100*importance/sum(.$importance)) %>%
ggplot(aes(x=variable, y=importance)) +
geom_col() +
labs(y="% of importance", x="") +
theme_bw()
ggsave(plot=plot_grid(pvi1, pvi2), filename = "varimp.png", dpi=300, height = 12, width = 22, units = "cm")
pvi2 <- rf.pca$variable.importance %>%
as.data.frame %>%
rename("importance" = ".") %>%
rownames_to_column("variable") %>%
arrange(desc(importance)) %>%
mutate(variable = factor(variable, levels = unique(variable)),
importance = 100*importance/sum(.$importance)) %>%
ggplot(aes(x=variable, y=importance)) +
geom_col() +
labs(y="Variable importance (%)", x="") +
theme_bw()
pvi1 <- rf$variable.importance %>%
as.data.frame %>%
rename("importance" = ".") %>%
rownames_to_column("variable") %>%
arrange(desc(importance)) %>%
mutate(variable = factor(variable, levels = unique(variable)),
importance = 100*importance/sum(.$importance)) %>%
ggplot(aes(x=variable, y=importance)) +
geom_col() +
labs(y="Variable importance (%)", x="") +
theme_bw()
ggsave(plot=plot_grid(pvi1, pvi2), filename = "varimp.png", dpi=300, height = 12, width = 22, units = "cm")
?ranger
(cm1 <- confusionMatrix(rf$predictions, df$Subtyp_final))
(cm2 <- confusionMatrix(rf.pca$predictions, dd$typ))
cm1$overall
cm1$overall["Accuracy"]
cm1$byClass
cm1$byClass %>% as.data.frame
cm1$byClass %>% select("Sensitivity", "Specificity", "Prevalence", "Detection Rate", "Balanced Accuracy")
cm1$byClass %>% as.data.frame %>% select("Sensitivity", "Specificity", "Prevalence", "Detection Rate", "Balanced Accuracy")
cm1$byClass %>% t
cm1$byClass %>% t %>% [c(1,2,8,9,11),]
cm1$byClass %>% t %>% "["(c(1,2,8,9,11),)
pca %>% get_eig %>% rownames_to_column("variable") %>% ggplot(aes(x=variable, y=variance.percent)) + geom_col()
cm1$byClass %>%
t %>%
"["(c(1,2,8,9,11),) %>%
cbind(cm2$byClass %>%
t %>%
"["(c(1,2,8,9,11),)) %>%
rownames_to_column("metric") %>%
write.table("confusion.matrix.csv", row.names = F, sep=",")
cm1$byClass %>%
t %>%
"["(c(1,2,8,9,11),) %>%
cbind(cm2$byClass %>%
t %>%
"["(c(1,2,8,9,11),)) %>%
as.data.frame() %>%
rownames_to_column("metric") %>%
write.table("confusion.matrix.csv", row.names = F, sep=",")
cm1$byClass %>%
t %>%
"["(c(1,2,8,9,11),) %>%
cbind(cm2$byClass %>%
t %>%
"["(c(1,2,8,9,11),)) %>%
round(4) %>%
as.data.frame() %>%
rownames_to_column("metric") %>%
write.table("confusion.matrix.csv", row.names = F, sep=",")
cm1$byClass %>%
t %>%
"["(c(1,2,8,9,11),) %>%
cbind(cm2$byClass %>%
t %>%
"["(c(1,2,8,9,11),)) %>%
round(3) %>%
as.data.frame() %>%
rownames_to_column("metric") %>%
write.table("confusion.matrix.csv", row.names = F, sep=",")
df <- read.table("data2.txt", header=T) %>%
mutate(
Subtyp_final = as.factor(Subtyp_final),
pomer = deadw_ha1/(Total_LT_ha1 + deadw_ha1)
)
responses <- c("Total_Rich", "Total_Abun", "Canopy_Rich", "Canopy_Abun", "Cavity_Rich", "Cavity_Abun",
"Ground_Shrub_Rich", "Ground_Shrub_Abun", "RLI",
"Generalist_Rich", "Generalist_Abun", "Specialist_Rich", "Specialist_Abun")
responses <- c("Total_Rich", "Total_Abun", "Generalist_Rich", "Generalist_Abun", "Specialist_Rich", "Specialist_Abun")
predictors <- c("Total_LT_ha1", "Struct_Can", "Underg_.", "Elev",
"BiologLegac1", "Windfall1")[c(T,T,T,T,F,F)]
# fitting models -----------------------------------------------------------------------------------------------------
models <- lapply(responses, function(resp){
step(lm(paste(resp, paste(paste("poly(", predictors, ",2)", sep=""), collapse = "+"), sep="~"), data=df),
direction = "backward", trace=FALSE)
}) %>%
set_names(responses)
# r squared ----------------------------------------------------------------------------------------------------------
r2 <- sapply(models, function(m) summary(m)$r.squared)
data.frame(r2)
responses <- c("Total_Rich", "Total_Abun", "Canopy_Rich", "Canopy_Abun", "Cavity_Rich", "Cavity_Abun",
"Ground_Shrub_Rich", "Ground_Shrub_Abun", "RLI",
"Generalist_Rich", "Generalist_Abun", "Specialist_Rich", "Specialist_Abun")
# fitting models -----------------------------------------------------------------------------------------------------
models <- lapply(responses, function(resp){
step(lm(paste(resp, paste(paste("poly(", predictors, ",2)", sep=""), collapse = "+"), sep="~"), data=df),
direction = "backward", trace=FALSE)
}) %>%
set_names(responses)
# r squared ----------------------------------------------------------------------------------------------------------
r2 <- sapply(models, function(m) summary(m)$r.squared)
data.frame(r2)
# anova tables -------------------------------------------------------------------------------------------------------
anovas <- do.call(rbind, lapply(1:length(responses), function(i) {
Anova(models[[i]]) %>%
as.data.frame() %>%
set_names(c("Sum.sq", "Df", "F.value", "p.value")) %>%
add_rownames("predictor") %>%
filter(!predictor %in% c("Residuals", "(Intercept)")) %>%
mutate(
response = responses[i]
#predictor = ifelse(grepl("poly", predictor), strsplit(substr(predictor, 6, 1000), ",")[[1]][1], predictor)
)
}))
library(tidyverse)
library(car)
library(scales)
# anova tables -------------------------------------------------------------------------------------------------------
anovas <- do.call(rbind, lapply(1:length(responses), function(i) {
Anova(models[[i]]) %>%
as.data.frame() %>%
set_names(c("Sum.sq", "Df", "F.value", "p.value")) %>%
add_rownames("predictor") %>%
filter(!predictor %in% c("Residuals", "(Intercept)")) %>%
mutate(
response = responses[i]
#predictor = ifelse(grepl("poly", predictor), strsplit(substr(predictor, 6, 1000), ",")[[1]][1], predictor)
)
}))
anovas
# anova tables -------------------------------------------------------------------------------------------------------
anovas <- do.call(rbind, lapply(1:length(responses), function(i) {
Anova(models[[i]]) %>%
round(4) %>%
as.data.frame() %>%
set_names(c("Sum.sq", "Df", "F.value", "p.value")) %>%
add_rownames("predictor") %>%
filter(!predictor %in% c("Residuals", "(Intercept)")) %>%
mutate(
response = responses[i]
#predictor = ifelse(grepl("poly", predictor), strsplit(substr(predictor, 6, 1000), ",")[[1]][1], predictor)
)
}))
anovas %>% write.table("anova.other.vars.csv", row.names = F, sep=",")
lapply(1:length(responses), function(i) {
Anova(models[[i]]) %>%
round(4) %>%
as.data.frame() %>%
set_names(c("Sum.sq", "Df", "F.value", "p.value")) %>%
add_rownames("predictor") %>%
filter(!predictor %in% c("Residuals", "(Intercept)")) %>%
mutate(
response = responses[i]
#predictor = ifelse(grepl("poly", predictor), strsplit(substr(predictor, 6, 1000), ",")[[1]][1], predictor)
)
}) %>%
reduce(full_join)
lapply(1:length(responses), function(i) {
Anova(models[[i]]) %>%
round(4) %>%
as.data.frame() %>%
set_names(c("Sum.sq", "Df", "F.value", "p.value")) %>%
add_rownames("predictor") %>%
filter(!predictor %in% c("Residuals", "(Intercept)")) %>%
mutate(
response = responses[i]
#predictor = ifelse(grepl("poly", predictor), strsplit(substr(predictor, 6, 1000), ",")[[1]][1], predictor)
)
}) %>%
reduce(full_join, by="predictor")
lapply(1:length(responses), function(i) {
Anova(models[[i]]) %>%
round(4) %>%
as.data.frame() %>%
set_names(c("Sum.sq", "Df", "F.value", "p.value")) %>%
select("F.value", "p.value") %>%
add_rownames("predictor") %>%
filter(!predictor %in% c("Residuals", "(Intercept)")) %>%
mutate(
response = responses[i]
#predictor = ifelse(grepl("poly", predictor), strsplit(substr(predictor, 6, 1000), ",")[[1]][1], predictor)
)
}) %>%
reduce(full_join, by="predictor")
lapply(1:length(responses), function(i) {
Anova(models[[i]]) %>%
round(4) %>%
as.data.frame() %>%
set_names(c("Sum.sq", "Df", "F.value", "p.value")) %>%
select("F.value", "p.value") %>%
add_rownames("predictor") %>%
filter(!predictor %in% c("Residuals", "(Intercept)"))
}) %>%
reduce(full_join, by="predictor")
lapply(1:length(responses), function(i) {
Anova(models[[i]]) %>%
round(4) %>%
as.data.frame() %>%
set_names(c("Sum.sq", "Df", "F.value", "p.value")) %>%
select("F.value", "p.value") %>%
add_rownames("predictor") %>%
filter(!predictor %in% c("Residuals", "(Intercept)"))
}) %>%
reduce(full_join, by="predictor") %>%
write.table("anova.other.vars.csv", row.names = F, sep=",")
responses
responses[grepl("_Rich", responses)]
responses[grepl("_Abund", responses)]
responses[grepl("_Abun", responses)]
lapply(responses[grepl("_Rich", responses)], function(i) {
Anova(models[[i]]) %>%
round(4) %>%
as.data.frame() %>%
set_names(c("Sum.sq", "Df", "F.value", "p.value")) %>%
select("F.value", "p.value") %>%
add_rownames("predictor") %>%
filter(!predictor %in% c("Residuals", "(Intercept)"))
}) %>% rbind(lapply(responses[grepl("_Abun", responses)], function(i) {
Anova(models[[i]]) %>%
round(4) %>%
as.data.frame() %>%
set_names(c("Sum.sq", "Df", "F.value", "p.value")) %>%
select("F.value", "p.value") %>%
add_rownames("predictor") %>%
filter(!predictor %in% c("Residuals", "(Intercept)"))
})) %>%
reduce(full_join, by="predictor") %>%
write.table("anova.other.vars.csv", row.names = F, sep=",")
lapply(responses[grepl("_Rich", responses)], function(i) {
Anova(models[[i]]) %>%
round(4) %>%
as.data.frame() %>%
set_names(c("Sum.sq", "Df", "F.value", "p.value")) %>%
select("F.value", "p.value") %>%
add_rownames("predictor") %>%
filter(!predictor %in% c("Residuals", "(Intercept)"))
}) %>%
reduce(full_join, by="predictor") %>%
rbind(lapply(responses[grepl("_Abun", responses)], function(i) {
Anova(models[[i]]) %>%
round(4) %>%
as.data.frame() %>%
set_names(c("Sum.sq", "Df", "F.value", "p.value")) %>%
select("F.value", "p.value") %>%
add_rownames("predictor") %>%
filter(!predictor %in% c("Residuals", "(Intercept)"))
}) %>%
reduce(full_join, by="predictor")
) %>%
write.table("anova.other.vars.csv", row.names = F, sep=",")
responses[grepl("_Abun", responses)]
# Classification -----------------------------------------------------------------------------------
rf <- ranger(Subtyp_final~., data = df[,c("Subtyp_final",predictors)],
num.trees = 500,
mtry = 3,
min.node.size = 5,
max.depth = NULL,
write.forest = TRUE,
importance = "impurity_corrected")
rf
rf$predictions
(cm1 <- confusionMatrix(rf$predictions, df$Subtyp_final))
rf$predictions==df$Subtyp_final
mean(rf$predictions==df$Subtyp_final)
predict(rf)
predict(rf, data=df)
p <- predict(rf, data=df)
p$predictions
responses <- c("Total_Rich", "Total_Abun", "Canopy_Rich", "Canopy_Abun", "Cavity_Rich", "Cavity_Abun",
"Ground_Shrub_Rich", "Ground_Shrub_Abun", "RLI",
"Generalist_Rich", "Generalist_Abun", "Specialist_Rich", "Specialist_Abun")
others <- c("Threatened_Rich", "Threatened_Abun")
df <- read.table("data2.txt", header=T) %>%
mutate(
Subtyp_final = as.factor(Subtyp_final),
pomer = deadw_ha1/(Total_LT_ha1 + deadw_ha1)
)
library(tidyverse)
library(car)
library(scales)
df <- read.table("data2.txt", header=T) %>%
mutate(
Subtyp_final = as.factor(Subtyp_final),
pomer = deadw_ha1/(Total_LT_ha1 + deadw_ha1)
)
responses <- c("Total_Rich", "Total_Abun", "Canopy_Rich", "Canopy_Abun", "Cavity_Rich", "Cavity_Abun",
"Ground_Shrub_Rich", "Ground_Shrub_Abun", "RLI",
"Generalist_Rich", "Generalist_Abun", "Specialist_Rich", "Specialist_Abun")
others <- c("Threatened_Rich", "Threatened_Abun")
predictors <- c("Total_LT_ha1", "Struct_Can", "Underg_.", "Elev",
"BiologLegac1", "Windfall1")[c(T,T,T,T,F,F)]
# fitting models -----------------------------------------------------------------------------------------------------
models <- lapply(c(responses, others), function(resp){
step(lm(paste(resp, paste(paste("poly(", predictors, ",2)", sep=""), collapse = "+"), sep="~"), data=df),
direction = "backward", trace=FALSE)
}) %>%
set_names(c(responses, others))
# r squared ----------------------------------------------------------------------------------------------------------
r2 <- sapply(models, function(m) summary(m)$r.squared)
data.frame(r2)
predictors <- c("Total_LT_ha1", "Struct_Can", "Underg_.", "Elev",
"BiologLegac1", "Windfall1")[c(T,T,T,T,T,T)]
# fitting models -----------------------------------------------------------------------------------------------------
models <- lapply(c(responses, others), function(resp){
step(lm(paste(resp, paste(paste("poly(", predictors, ",2)", sep=""), collapse = "+"), sep="~"), data=df),
direction = "backward", trace=FALSE)
}) %>%
set_names(c(responses, others))
vif(models[[1]])
vif(lm(paste(responses[1], paste(paste("poly(", predictors, ",2)", sep=""), collapse = "+"), sep="~"), data=df))
vif(lm(paste(responses[2], paste(paste("poly(", predictors, ",2)", sep=""), collapse = "+"), sep="~"), data=df))
vif(lm(paste(responses[3], paste(paste("poly(", predictors, ",2)", sep=""), collapse = "+"), sep="~"), data=df))
cor(df[,predictors])
corrplot::corrplot(df[,predictors])
corrplot::corrplotcor((df[,predictors]))
corrplot::corrplot(cor((df[,predictors]))
)
citation()
citation("ranger")
?caret::confusionMatrix
0.043/0.156
citation("caret")
citation("ggplot2")
?ranger
?ranger::ranger
library(ranger)
library(caret)
# Classification -----------------------------------------------------------------------------------
rf <- ranger(Subtyp_final~., data = df[,c("Subtyp_final",predictors)],
num.trees = 500,
mtry = 3,
min.node.size = 1,
max.depth = NULL,
write.forest = TRUE,
importance = "impurity_corrected")
rf$predictions
rf$variable.importance
pvi1 <- rf$variable.importance %>%
as.data.frame %>%
rename("importance" = ".") %>%
rownames_to_column("variable") %>%
arrange(desc(importance)) %>%
mutate(variable = factor(variable, levels = unique(variable)),
importance = 100*importance/sum(.$importance)) %>%
ggplot(aes(x=variable, y=importance)) +
geom_col() +
labs(y="Variable importance (%)", x="") +
theme_bw()
dev.off()
pvi1 <- rf$variable.importance %>%
as.data.frame %>%
rename("importance" = ".") %>%
rownames_to_column("variable") %>%
arrange(desc(importance)) %>%
mutate(variable = factor(variable, levels = unique(variable)),
importance = 100*importance/sum(.$importance)) %>%
ggplot(aes(x=variable, y=importance)) +
geom_col() +
labs(y="Variable importance (%)", x="") +
theme_bw()
pvi1
(cm1 <- confusionMatrix(rf$predictions, df$Subtyp_final))
rf <- ranger(Subtyp_final~., data = df[,c("Subtyp_final",predictors)],
num.trees = 500)
rf$predictions
(cm1 <- confusionMatrix(rf$predictions, df$Subtyp_final))
rf$variable.importance
rf$variable.importance %>%
as.data.frame %>%
rename("importance" = ".") %>%
rownames_to_column("variable") %>%
arrange(desc(importance)) %>%
mutate(variable = factor(variable, levels = unique(variable)),
importance = 100*importance/sum(.$importance)) %>%
ggplot(aes(x=variable, y=importance)) +
geom_col() +
labs(y="Variable importance (%)", x="") +
theme_bw()
rf <- ranger(Subtyp_final~., data = df[,c("Subtyp_final",predictors)],
num.trees = 500,
importance = "impurity")
(cm1 <- confusionMatrix(rf$predictions, df$Subtyp_final))
rf$variable.importance
rf$variable.importance %>%
as.data.frame %>%
rename("importance" = ".") %>%
rownames_to_column("variable") %>%
arrange(desc(importance)) %>%
mutate(variable = factor(variable, levels = unique(variable)),
importance = 100*importance/sum(.$importance)) %>%
ggplot(aes(x=variable, y=importance)) +
geom_col() +
labs(y="Variable importance (%)", x="") +
theme_bw()
rf <- ranger(Subtyp_final~., data = df[,c("Subtyp_final",predictors)],
num.trees = 500,
importance = "impurity")
(cm1 <- confusionMatrix(rf$predictions, df$Subtyp_final))
rf$variable.importance %>%
as.data.frame %>%
rename("importance" = ".") %>%
rownames_to_column("variable") %>%
arrange(desc(importance)) %>%
mutate(variable = factor(variable, levels = unique(variable)),
importance = 100*importance/sum(.$importance)) %>%
ggplot(aes(x=variable, y=importance)) +
geom_col() +
labs(y="Variable importance (%)", x="") +
theme_bw()
# data ------------------------------------------------------------------------------------------------
df <- read.table("data.txt", header=T) %>%
mutate(
Subtyp_final = as.factor(Subtyp_final),
pomer = deadw_ha1/(Total_LT_ha1 + deadw_ha1)
) %>%
rename(LiveTrees = "Total_LT_ha1",
Complexity = "Struct_Can",
Understory = "Underg_.",
BioLegacy = "BiologLegac1",
Windfalls = "Windfall1")
predictors <- c("LiveTrees", "Complexity", "Understory", "Elev",
"BioLegacy", "Windfalls")
rf <- ranger(Subtyp_final~., data = df[,c("Subtyp_final",predictors)],
num.trees = 500,
importance = "impurity")
(cm1 <- confusionMatrix(rf$predictions, df$Subtyp_final))
rf <- ranger(Subtyp_final~., data = df[,c("Subtyp_final",predictors)],
num.trees = 500,
importance = "impurity")
(cm1 <- confusionMatrix(rf$predictions, df$Subtyp_final))
pvi1 <- rf$variable.importance %>%
as.data.frame %>%
rename("importance" = ".") %>%
rownames_to_column("variable") %>%
arrange(desc(importance)) %>%
mutate(variable = factor(variable, levels = unique(variable)),
importance = 100*importance/sum(.$importance)) %>%
ggplot(aes(x=variable, y=importance)) +
geom_col() +
labs(y="Variable importance (%)", x="") +
theme_bw()
rf.pca <- ranger(typ~., data = dd,
num.trees = 500,
importance = "impurity")
(cm2 <- confusionMatrix(rf.pca$predictions, dd$typ))
rf.pca$variable.importance
View(dd)
pvi2 <- rf.pca$variable.importance %>%
as.data.frame %>%
rename("importance" = ".") %>%
rownames_to_column("variable") %>%
arrange(desc(importance)) %>%
mutate(variable = factor(variable, levels = unique(variable)),
importance = 100*importance/sum(.$importance)) %>%
ggplot(aes(x=variable, y=importance)) +
geom_col() +
labs(y="Variable importance (%)", x="") +
theme_bw()
ggsave(plot=plot_grid(pvi1, pvi2), filename = "varimp.png", dpi=300, height = 12, width = 22, units = "cm")
pca %>% get_eig %>% rownames_to_column("variable") %>% ggplot(aes(x=variable, y=variance.percent)) + geom_col()
library(gridExtra)
library(factoextra)
ggsave(plot=plot_grid(pvi1, pvi2), filename = "varimp.png", dpi=300, height = 12, width = 22, units = "cm")
library(cowplot)
ggsave(plot=plot_grid(pvi1, pvi2), filename = "varimp.png", dpi=300, height = 12, width = 22, units = "cm")
pca %>% get_eig %>% rownames_to_column("variable") %>% ggplot(aes(x=variable, y=variance.percent)) + geom_col()
cm1$byClass %>%
t %>%
"["(c(1,2,8,9,11),) %>%
cbind(cm2$byClass %>%
t %>%
"["(c(1,2,8,9,11),)) %>%
round(3) %>%
as.data.frame() %>%
rownames_to_column("metric") %>%
write.table("confusion.matrix.csv", row.names = F, sep=",")
citation("factoextra")
